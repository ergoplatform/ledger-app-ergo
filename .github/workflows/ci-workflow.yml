name: Compilation & tests


on:
  workflow_dispatch:
    inputs:
      golden_run:
        type: choice
        required: true
        default: 'Raise an error (default)'
        description: CI behavior if the test snapshots are different than expected.
        options:
          - 'Raise an error (default)'
          - 'Open a PR'
  push:
  pull_request:

jobs:
  job_build_application:
    name: Build application using the reusable workflow
    uses: LedgerHQ/ledger-app-workflows/.github/workflows/reusable_build.yml@v1
    with:
      upload_app_binaries_artifact: "compiled_app_binaries"

  job_unit_test:
    name: Unit tests
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-lite:latest

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Build unit tests
        run: |
          cd unit-tests/
          cmake -Bbuild -H. && make -C build

      - name: Run unit tests
        run: |
          cd unit-tests/
          make -C build test

      - name: Generate code coverage
        run: |
          cd unit-tests/
          lcov --directory . -b "$(realpath build/)" --capture --initial -o coverage.base && \
          lcov --rc lcov_branch_coverage=1 --directory . -b "$(realpath build/)" --capture -o coverage.capture && \
          lcov --directory . -b "$(realpath build/)" --add-tracefile coverage.base --add-tracefile coverage.capture -o coverage.info && \
          lcov --directory . -b "$(realpath build/)" --remove coverage.info '*/unit-tests/*' -o coverage.info && \
          genhtml coverage.info -o coverage

      - uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: unit-tests/coverage

      - name: Upload to codecov.io
        if: false
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./unit-tests/coverage.info
          flags: unittests
          name: codecov-app-ergo
          fail_ci_if_error: true
          verbose: true

  job_generate_doc:
    name: Generate project documentation
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-lite:latest

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: HTML documentation
        run: doxygen .doxygen/Doxyfile

      - uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: doc/html

  job_scan_build:
    name: Clang Static Analyzer
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - SDK: "$NANOSP_SDK"
          - SDK: "$STAX_SDK"

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-lite:latest

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Build with Clang Static Analyzer
        run: |
          export BOLOS_SDK=${{ matrix.SDK }}
          make clean
          scan-build --use-cc=clang -analyze-headers -enable-checker security -enable-checker unix -enable-checker valist -o scan-build --status-bugs make default

      - name: Upload scan result
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: scan-build
          path: scan-build

  job_ragger_tests:
    name: Run ragger tests using the reusable workflow
    needs: job_build_application
    uses: LedgerHQ/ledger-app-workflows/.github/workflows/reusable_ragger_tests.yml@v1
    with:
      download_app_binaries_artifact: "compiled_app_binaries"
      regenerate_snapshots: ${{ inputs.golden_run == 'Open a PR' }}
